#!/bin/bash

# E2E Test that ALWAYS saves results - no cleanup prompts
# Perfect for CI/CD or when you always want to inspect results

set -e

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'  
BLUE='\033[0;34m'
NC='\033[0m'

echo -e "${BLUE}🚀 E2E Test (Always Save Results)${NC}"
echo "===================================="

# Setup directories
TEST_DIR="tests/e2e-$(date +%Y%m%d-%H%M%S)"
TEST_OUTPUT_DIR="tests/output-$(date +%Y%m%d-%H%M%S)"
ORIGINAL_DIR="$(pwd)"

mkdir -p "$TEST_DIR" "$TEST_OUTPUT_DIR"
cd "$TEST_DIR"

echo "Test workspace: $TEST_DIR"
echo "Output directory: $TEST_OUTPUT_DIR"

# Build if needed
if [ ! -f "../../bin/pm" ]; then
    echo -e "${YELLOW}Building PM binary...${NC}"
    (cd ../.. && go build -o bin/pm ./cmd/pm)
fi

# Check SSH
if ! ssh -o BatchMode=yes -o ConnectTimeout=3 localhost exit 2>/dev/null; then
    echo -e "${RED}❌ SSH to localhost failed${NC}"
    exit 1
fi

echo -e "${GREEN}✅ Prerequisites ready${NC}"

# Create comprehensive test files
echo -e "\n${BLUE}📁 Creating test files${NC}"

mkdir -p src/{main,utils,config} docs tests

# Main source files
cat > src/main/app.go << 'EOF'
package main

import (
    "fmt"
    "time"
)

func main() {
    fmt.Printf("Package Manager Test App\n")
    fmt.Printf("Started at: %s\n", time.Now().Format("2006-01-02 15:04:05"))
}
EOF

cat > src/utils/helper.go << 'EOF'
package utils

import "strings"

// Helper provides utility functions for the test app
func Helper(input string) string {
    return strings.ToUpper("Processed: " + input)
}

// Version returns the test app version
func Version() string {
    return "1.0.0-test"
}
EOF

cat > src/config/settings.go << 'EOF'
package config

// Settings holds application configuration
type Settings struct {
    AppName string `json:"app_name"`
    Debug   bool   `json:"debug"`
    Port    int    `json:"port"`
}

// DefaultSettings returns default configuration
func DefaultSettings() *Settings {
    return &Settings{
        AppName: "PM Test App",
        Debug:   true,
        Port:    8080,
    }
}
EOF

# Documentation
cat > docs/README.md << 'EOF'
# Package Manager Test Application

This is a comprehensive test application for the package manager.

## Components

- **src/main/**: Main application entry point
- **src/utils/**: Utility functions and helpers  
- **src/config/**: Configuration management
- **docs/**: Documentation files
- **tests/**: Test files

## Features

- Configuration management
- Utility functions
- Comprehensive documentation
- Test coverage

Generated by E2E test suite.
EOF

cat > docs/API.md << 'EOF'
# API Documentation

## Utils Package

### Helper(input string) string
Processes input string and returns uppercase version.

### Version() string  
Returns application version.

## Config Package

### Settings struct
Holds application configuration.

### DefaultSettings() *Settings
Returns default configuration values.
EOF

# Test files
cat > tests/helper_test.go << 'EOF'
package utils_test

import (
    "testing"
    "myapp/src/utils"
)

func TestHelper(t *testing.T) {
    result := utils.Helper("test")
    expected := "PROCESSED: TEST" 
    if result != expected {
        t.Errorf("Expected %s, got %s", expected, result)
    }
}
EOF

# Files that should be excluded
echo "Temporary build file" > build.tmp
echo "Debug log entry" > debug.log
echo "Cache data" > src/cache.tmp

echo "✅ Created comprehensive test files"

# Create packet configuration
echo -e "\n${BLUE}📦 Creating packet configuration${NC}"

cat > packet.json << 'EOF'
{
  "name": "comprehensive-test-app",
  "ver": "1.0.0",
  "targets": [
    {
      "path": "src/**/*.go",
      "exclude": ["*.tmp"]
    },
    "docs/*.md",
    {
      "path": "tests/*.go",
      "exclude": []
    },
    {
      "path": "*",
      "exclude": ["*.tmp", "*.log", "*.json"]
    }
  ]
}
EOF

# SSH config pointing to our output directory
TEST_REMOTE_DIR="$ORIGINAL_DIR/$TEST_OUTPUT_DIR/remote-packages"
mkdir -p "$TEST_REMOTE_DIR"

cat > ssh-config.json << EOF
{
  "host": "localhost",
  "port": 22,
  "username": "$(whoami)",
  "key_path": "~/.ssh/id_rsa",
  "remote_dir": "$TEST_REMOTE_DIR"
}
EOF

# Test create
echo -e "\n${BLUE}📤 Testing CREATE${NC}"
if ../../bin/pm create packet.json -c ssh-config.json; then
    echo -e "${GREEN}✅ CREATE successful${NC}"
else
    echo -e "${RED}❌ CREATE failed${NC}"
    exit 1
fi

# Verify archive exists
ARCHIVE_FILE="$TEST_REMOTE_DIR/comprehensive-test-app-1.0.0.tar.gz"
if [ -f "$ARCHIVE_FILE" ]; then
    echo -e "${GREEN}✅ Archive created: $(ls -lh "$ARCHIVE_FILE" | awk '{print $5}')${NC}"
else
    echo -e "${RED}❌ Archive not found${NC}"
    exit 1
fi

# Create packages config
cat > packages.json << 'EOF'
{
  "packages": [
    {
      "name": "comprehensive-test-app",
      "ver": ">=1.0.0"
    }
  ]
}
EOF

# Test update
echo -e "\n${BLUE}📥 Testing UPDATE${NC}"
if ../../bin/pm update packages.json -c ssh-config.json; then
    echo -e "${GREEN}✅ UPDATE successful${NC}"
else
    echo -e "${RED}❌ UPDATE failed${NC}"
    exit 1
fi

# Verify extraction
if [ -d "packages/comprehensive-test-app" ]; then
    echo -e "${GREEN}✅ Package extracted${NC}"
    FILE_COUNT=$(find packages/comprehensive-test-app -type f | wc -l)
    echo "   Files extracted: $FILE_COUNT"
else
    echo -e "${RED}❌ Package not extracted${NC}"
    exit 1
fi

# Save all results
echo -e "\n${BLUE}💾 Saving results${NC}"

# Copy everything to output directory
cp -r . "$ORIGINAL_DIR/$TEST_OUTPUT_DIR/test-workspace/"

# Create detailed summary
cat > "$ORIGINAL_DIR/$TEST_OUTPUT_DIR/test-report.md" << EOF
# E2E Test Report

**Test Date:** $(date)  
**Test Duration:** ${SECONDS}s  
**Test ID:** $(basename "$TEST_DIR")

## Test Results

✅ **Package Creation:** SUCCESS  
✅ **Package Upload:** SUCCESS  
✅ **Package Download:** SUCCESS  
✅ **Package Extraction:** SUCCESS

## Test Details

### Created Files
$(find . -name "*.go" -o -name "*.md" | sort | sed 's/^/- /')

### Archive Information
- **File:** $ARCHIVE_FILE
- **Size:** $(ls -lh "$ARCHIVE_FILE" | awk '{print $5}')
- **Contents:** $(tar -tzf "$ARCHIVE_FILE" | wc -l) files

### Archive Contents
\`\`\`
$(tar -tzf "$ARCHIVE_FILE" | sort)
\`\`\`

### Extracted Files
\`\`\`
$(find packages/comprehensive-test-app -type f | sort)
\`\`\`

### Files Excluded (Correct Behavior)
- build.tmp
- debug.log  
- src/cache.tmp
- packet.json
- packages.json

### Verification
$([ -f "packages/comprehensive-test-app/src/main/app.go" ] && echo "✅ Main app file extracted" || echo "❌ Main app file missing")
$([ -f "packages/comprehensive-test-app/docs/README.md" ] && echo "✅ Documentation extracted" || echo "❌ Documentation missing")
$([ ! -f "packages/comprehensive-test-app/build.tmp" ] && echo "✅ Temp files correctly excluded" || echo "❌ Temp files incorrectly included")

## File Samples

### src/main/app.go
\`\`\`go
$(head -n 10 src/main/app.go)
\`\`\`

### docs/README.md
\`\`\`markdown
$(head -n 15 docs/README.md)
\`\`\`

## Test Environment
- **Working Directory:** $(pwd)
- **PM Binary:** ../../bin/pm
- **SSH Target:** localhost
- **Remote Directory:** $TEST_REMOTE_DIR

## Commands Executed
\`\`\`bash
../../bin/pm create packet.json -c ssh-config.json
../../bin/pm update packages.json -c ssh-config.json
\`\`\`
EOF

# Create file listing
cat > "$ORIGINAL_DIR/$TEST_OUTPUT_DIR/file-listing.txt" << EOF
Test Files Created:
==================
$(find . -type f | sort)

Archive Contents:
================
$(tar -tzf "$ARCHIVE_FILE" | sort)

Extracted Files:
===============
$(find packages/comprehensive-test-app -type f | sort)
EOF

# Go back to original directory
cd "$ORIGINAL_DIR"

echo -e "\n${GREEN}🎉 E2E Test Completed Successfully!${NC}"
echo "========================================"
echo "✅ All operations successful"
echo "✅ Results saved permanently"

echo -e "\n${YELLOW}📁 Results Location:${NC}"
echo "- Test Report: $TEST_OUTPUT_DIR/test-report.md"
echo "- File Listing: $TEST_OUTPUT_DIR/file-listing.txt"
echo "- Test Workspace: $TEST_OUTPUT_DIR/test-workspace/"
echo "- Archive Files: $TEST_OUTPUT_DIR/remote-packages/"

echo -e "\n${YELLOW}🔍 Quick Inspection:${NC}"
echo "# View test report"
echo "cat $TEST_OUTPUT_DIR/test-report.md"
echo ""
echo "# Browse all results" 
echo "find $TEST_OUTPUT_DIR -type f | sort"
echo ""
echo "# Check archive contents"
echo "tar -tzf $TEST_OUTPUT_DIR/remote-packages/comprehensive-test-app-1.0.0.tar.gz"

echo -e "\n${GREEN}✨ Test artifacts preserved for inspection!${NC}"